{
  "comments": [
    {
      "key": {
        "uuid": "9a437d4f_4fa9447a",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 735,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-09-15T08:27:16Z",
      "side": 1,
      "message": "I don\u0027t know why \u0027halfMaxSleepTime\u0027 exists -- the original code had \u0027maxSleepTime\u0027, and this may have been introduced to fix a perceived problem. It looks ugly to me -- somehow, we missed this during the code inspection.",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_a24c4743",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 735,
      "author": {
        "id": 57
      },
      "writtenOn": "2017-09-15T12:46:47Z",
      "side": 1,
      "message": "I\u0027m just fixing sonar here. I can change it to what you think is correct if you want. Or defer to another JIRA being created to address it. Just let me know what you would like.",
      "parentUuid": "9a437d4f_4fa9447a",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_7d72834a",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 477
      },
      "writtenOn": "2017-09-14T18:42:26Z",
      "side": 1,
      "message": "I think the original code, or some modified version of this may be needed.   Let me add Ralph to check, he knows this code well.  There may be some unusual Runtime exceptions such as LinkageException, or others from within the control looops, when the logic is faulty, I think I have seen in the past, NullPointerExceptions from the \"java helpers\" etc .. , may be unusual LinkageExceptions that leak all the way up to here, when the drools application has some bugs. It hink it may need to be tolerated in that loop so not to so rules are kept been evaluated.",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_ef835802",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-09-15T08:27:16Z",
      "side": 1,
      "message": "There is similar code at the end of \u0027PolicySession.java\u0027, where the \u0027DefaultThreadModel\u0027 class is defined. That one is using \u0027catch (Exception | LinkageError e)\u0027. If I remember correctly, you fixed this one a while back due to a Sonar complaint -- it had \u0027Throwable\u0027 as well.",
      "parentUuid": "9a437d4f_7d72834a",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_ddcbaf51",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 57
      },
      "writtenOn": "2017-09-15T12:46:47Z",
      "side": 1,
      "message": "Yes I was wondering about it. Maybe just catching Exception can handle it and remove blocker? If not, I\u0027ll put it back and mark as not going to fix.",
      "parentUuid": "9a437d4f_7d72834a",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_82914354",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-09-15T13:22:29Z",
      "side": 1,
      "message": "Originally, the code was only catching \u0027Exception\u0027, but we ran into cases where the Drools session worked for a while, but then just stopped processing altogether. If I remember correctly, there was a version mismatch on a dependency that resulted in a \u0027NoSuchMethodError\u0027, at which point we changed \u0027Exception\u0027 to \u0027Throwable\u0027.\n\nJorge has since changed \u0027PolicySession\u0027 to use \u0027Exception | LinkageError\u0027 instead of \u0027Throwable\u0027. This still handles cases like \u0027NoSuchMethodError\u0027 without intercepting the more severe system errors. I think \u0027Exception | LinkageError\u0027 should also be used here.",
      "parentUuid": "9a437d4f_ddcbaf51",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_c29d0b5b",
        "filename": "feature-session-persistence/src/main/java/org/onap/policy/drools/persistence/PersistenceFeature.java",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 57
      },
      "writtenOn": "2017-09-15T13:33:47Z",
      "side": 1,
      "message": "Ok - so bring back the try-catch (Exception | LinkageError)",
      "parentUuid": "9a437d4f_82914354",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_fd9d535a",
        "filename": "policy-management/src/main/java/org/onap/policy/drools/system/PolicyEngine.java",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 477
      },
      "writtenOn": "2017-09-14T18:42:26Z",
      "side": 1,
      "message": "oh, I just marked this sonar as a false positive, since line 1004, next line below exists the process.   This is fine too though.",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_afcb1052",
        "filename": "policy-management/src/main/java/org/onap/policy/drools/system/PolicyEngine.java",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-09-15T08:27:16Z",
      "side": 1,
      "message": "Won\u0027t the interrupt terminate this thread, keeping \u0027System.exit(0)\u0027 from being called? If so, that seems like the wrong thing to do.",
      "parentUuid": "9a437d4f_fd9d535a",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a437d4f_c2450b18",
        "filename": "policy-management/src/main/java/org/onap/policy/drools/system/PolicyEngine.java",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 57
      },
      "writtenOn": "2017-09-15T12:46:47Z",
      "side": 1,
      "message": "Not according to Sonar recommendations. Take a look at why they want this done. I thought it weird, but didn\u0027t seem like any harm was to be done on it. The interrupt is already being caught right here, so System.exit(0) doesn\u0027t even matter anyway. The interrupt flag is off. They are simply recommending turning it back on.",
      "parentUuid": "9a437d4f_afcb1052",
      "revId": "6de3a3ab7d398b021069607d34857cd298d26556",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}