{
  "comments": [
    {
      "key": {
        "uuid": "eb602105_1876149f",
        "filename": "feature-server-pool/config/TestController-controller.properties",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "This file seems for dev. testing, remove.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e19a0a89_43e15927",
        "filename": "feature-server-pool/config/TestController-controller.properties",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "or move to a test directory that isn\u0027t included in a production jar",
      "parentUuid": "eb602105_1876149f",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d668f54_487ae7db",
        "filename": "feature-server-pool/src/main/feature/config/feature-server-pool.properties",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Need license headers- general comment.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cc70012_ef465119",
        "filename": "feature-server-pool/src/main/feature/config/feature-server-pool.properties",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Should use ${env.VARX} instead of ${{VARX}}.   For installs should provide a feature-server-pool.conf.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34471e46_61b32999",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "this file is huge - let\u0027s refactor it into several different classes",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bfbeaf3_f0cb7218",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "In general, prefer to use javadoc comments for fields, though this is not hard and fast.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04dc8632_a09a3694",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "looks like this and a number of the other statics (e.g., timeToLive) could be moved to a \"Context\" object that is passed to the constructor.  That would potentially make it much easier to junit test a Bucket by giving it a new Context.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81de4fa5_cd1a99eb",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "same comment in most of the other classes",
      "parentUuid": "04dc8632_a09a3694",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "518eb75e_b947268a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "assuming this is needed, should probably throw a ExceptionInInitializerError",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "511ae000_bc86fd29",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "declare as List",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1635f1cd_68481258",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "I\u0027m noticing lots of code that seems to be similar for both owner, primary, and secondary.  Seems like this would imply the need for some additional abstraction.  If that were done, the owner, primary, and secondary objects could be placed into an ArrayList.  That would still provide direct indexing via get/put, but would also be convenient for iterating.  Once that\u0027s done, operations could be performed simply by iterating over each item in the list.\n\nEven if abstraction cannot be done, it still might make sense to put them all into an array/ArrayList so that the same method could be used to manipulate primary and secondary data; just pass a different index to the method.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f17d343f_70bbfac8",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "There are subtle differences between primary and secondary backup, and more significant differences between either of these and owner. My gut feeling is that accessing all of these through an array would lead to a few opportunities for reuse, but many more opportunities for confusion.\n\nA less disruptive approach would be to define a method \u0027Server getBucketServer(int index)\u0027 and \u0027void setBucketServer(Server server, int index)\u0027, where index has the range 0-2, and these could be used any place where all three are treated the same (I don\u0027t know exactly where at this point).",
      "parentUuid": "1635f1cd_68481258",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecb1bc2a_4f7de7aa",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "seems like a perfect opportunity for some object abstraction, where the \"subtle differences\" would be captured in subclasses",
      "parentUuid": "f17d343f_70bbfac8",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f05b77d_f1cc7f66",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "declare as Map\n\ndoesn\u0027t this need a suppress-warning \"raw types\"?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "899d56aa_6bcd5bd2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "use non-static methods, perhaps as methods on the \"Context\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a29550_9bcb2cf8",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "or use TLS",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f03ef21d_64e8f705",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "just invoke bucket.getOwner(), as it is already synchronized",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01243691_ce3dbd96",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 274,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "make this a synchronized method call on Bucket thus avoiding the need to synchronize(bucket)\n\nsimilar comment for other uses of \"synchronized(bucket)\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c402557d_c2aad981",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "could Rebalance implement Runnable?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c901b88_c9924be2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 394,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: use lamdba",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fca3eba_d22526c5",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 407,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "specify character encoding type\n\nsame comment elsewhere",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e5acb74_c0e26223",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "ok if this throws index-out-of-bounds?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4da1a92b_0043b45c",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "It would mean that the data is corrupted -- one of those \"this should never happen\" things, like \u0027IOException\u0027. If it does happen, the caller logs an error message, and the update operation is aborted.",
      "parentUuid": "1e5acb74_c0e26223",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "741858ca_f0675ba0",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "can getServer() return null?  will it matter?\n\nsame question for other \"case\" blocks",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe5b22b_3012498d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 450,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: nesting is too deep",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e8c361_8760be31",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "bucket.state \u003d null?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd5c6eb5_0b465260",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 646,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "need to synchronize before copying data?  If not, might it make sense to copy the data in the constructor, as copyData() always seems to be the first thing done, though I don\u0027t know if that\u0027s true in every case.\n\nsame question below",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09dc0b3d_7d91aa41",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 646,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "Most of \u0027copyData\u0027 runs in the \u0027MainLoop\u0027 thread, which is also the only thread where bucket updates occur.",
      "parentUuid": "fd5c6eb5_0b465260",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19369991_2470412d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 716,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "will this be invoked even if the connection cannot be established?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78318b48_ec2c78d2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 716,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "Actually, it looks like the callback would be missed if an exception occurs -- good catch!\n\nI think the best fix would be to add a new method to interface \u0027Server.PostResponse\u0027 that is called if an exception occurs, and give it a default implementation that generates an appropriate \u0027Response\u0027 object, and calls \u0027response(Response)\u0027. That way, callers who want to explicitly see exceptions can, and those that just want the failure response don\u0027t need to do anything different.",
      "parentUuid": "19369991_2470412d",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9b4c56e_f327faee",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 732,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "log e, rethrow or reinterrupt (sonar)",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397b132a_08e74de2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 732,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "and just println() a generic message",
      "parentUuid": "b9b4c56e_f327faee",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f52e3116_9b09295c",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 753,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "can bucket be null?  if not, just use plain \"int\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "851b9b3a_2551e7a6",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 794,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "no need to synchronize to prevent rebalancing by another thread?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "851a5eca_7e9e02a0",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 794,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "The actual updates only occur in the \u0027MainLoop\u0027 thread, so there shouldn\u0027t be any synchronization issues. I suppose it is possible that an automatic rebalance and a rebalance from a REST command could be interleaved, but the end result would be two rebalances in quick succession -- there shouldn\u0027t be any corruption, because the \u0027Rebalance.copyData()\u0027 and update operations are both \"atomic\", as both run in the MainLoop thread.",
      "parentUuid": "851b9b3a_2551e7a6",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f69fb66_e53e1dd9",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 820,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "can\u0027t just pick a random key that isn\u0027t the same as the current host\u0027s key?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "995dbf3f_d6ca396a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 820,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "The key needs to be that of an existing active host, other than the current host.",
      "parentUuid": "4f69fb66_e53e1dd9",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "427013c3_bc0fa1d7",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 820,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "can\u0027t just generate a random number that\u0027s one less than the number of servers?  if count\u003dcurrent server then set count\u003dlast server",
      "parentUuid": "995dbf3f_d6ca396a",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12384fa0_115c8c4f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 820,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-14T09:59:51Z",
      "side": 1,
      "message": "The servers are in a TreeMap -- it seems that some kind of stepping is required in order to get a random distribution. This is in a REST command used for testing, so performance isn\u0027t an issue.",
      "parentUuid": "427013c3_bc0fa1d7",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fea622a_65af74c5",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 820,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-14T13:40:43Z",
      "side": 1,
      "message": "Oh, I see.  The code has to start with a \"key\" and then adjust the key as it goes from one server to the next.  Can\u0027t just jump straight to the last server, based on the count, and invoke higherKey().",
      "parentUuid": "12384fa0_115c8c4f",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b5c159b_240060d2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 892,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Wny not to reuse the HttpClient policy-endpoints from policy-endpoints in policy/common?   I think they cover same functionality and if missing could extend it so all can benefit from the work.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61bd97b1_917154b6",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 892,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-05T12:10:59Z",
      "side": 1,
      "message": "\u0027webTarget\u0027 was derived from \u0027HttpClient\u0027 -- see \u0027Server.getTarget(HttpClient client)\u0027. The idea was to build \u0027HttpClient\u0027 just once for each remote \u0027Server\u0027 instance, and then build on top of that to construct the specific query. I didn\u0027t see an efficient way to do that with the current API.",
      "parentUuid": "7b5c159b_240060d2",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "043b1e68_e593e56c",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 892,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-05T22:45:18Z",
      "side": 1,
      "message": "I see, thanks for explaining.",
      "parentUuid": "61bd97b1_917154b6",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d5efd0f_d2a314f5",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 896,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "maybe include ttl, too, in case it failed because it couldn\u0027t find the server",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c75f8ec_fe749c83",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 926,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "prefer this to avoid nesting:\n\n  if(...) {\n    return;\n  }\n\n  ...",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5a8ab5_8f21f5bf",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Can adjunct functionality (I think exists in some other places), be placed in policy-utils as a generic library?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "772652c0_a0f936de",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-05T12:10:59Z",
      "side": 1,
      "message": "There is a similar capability in class \u0027Transaction\u0027 in the m2 model, and a slightly different capability in \u0027PolicyContainer\u0027 and \u0027PolicySession\u0027 in \u0027core\u0027. It might be a good idea to try to come up with something generic that could be used everywhere. It gets a bit challenging to do this cleanly, because these are template methods.",
      "parentUuid": "2a5a8ab5_8f21f5bf",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af3bbefa_61a27bd9",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-05T22:45:18Z",
      "side": 1,
      "message": "Ok, let\u0027s leave it for the future.",
      "parentUuid": "772652c0_a0f936de",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45bc4d9_3adb39a5",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1269,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "add \"final\"?\n\nsame comment with the others",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc7d23d9_0f2aac44",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1269,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "Is there a benefit to making it \u0027final\u0027? At present, we aren\u0027t reassigning this anywhere, but you could envision an algorithm where you end up generating a new TreeSet, rather than incrementally updating \u0027buckets\u0027.",
      "parentUuid": "b45bc4d9_3adb39a5",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "738e7cd2_cfef7342",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1269,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "the benefit is that it prevents something else from changing it\u0027s value.  If the code changes later so that it intentionally changes its value, then \"final\" can be removed at that time.  Basically, it provides a safety check for things you don\u0027t expect to change.  I don\u0027t frequently use it within the body of a method, but I often use it in class definitions, if it\u0027s something that shouldn\u0027t be changed",
      "parentUuid": "dc7d23d9_0f2aac44",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14a5154c_0e5a17c6",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1416,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: use a lambda",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e5d49b0_3fcde4f8",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1434,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "need to synchronize(bucket) while copying this data?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a7e8ac7_15e03855",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1434,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "Updates to \u0027owner\u0027, \u0027primaryBackup\u0027, and \u0027secondaryBackup\u0027 always occur within the \u0027MainLoop\u0027 thread.",
      "parentUuid": "4e5d49b0_3fcde4f8",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c012c8ba_d1e2b277",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1470,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "can get() return null?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704d7c2b_87a62e5e",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1470,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "It shouldn\u0027t be -- the \u0027testServers\u0027 table should be an atomic snapshot of the \u0027Servers\u0027 table. As long as the \u0027Servers\u0027 table isn\u0027t corrupted, the \u0027testServers\u0027 table won\u0027t be either. \n\nIf the \u0027Servers\u0027 table somehow did get corrupted, a \u0027null\u0027 return from \u0027get\u0027 would be interpreted as an unassigned \u0027owner\u0027 (or \u0027primaryBackup\u0027 or \u0027secondaryBackup\u0027), and the rebalance algorithm would assign one.",
      "parentUuid": "c012c8ba_d1e2b277",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88349283_d9e7c316",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1478,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "null?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34aed033_f63110df",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1478,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "See the previous response.",
      "parentUuid": "88349283_d9e7c316",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf3e4298_5ce49d9f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1486,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "null?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0d9613e_17ee637f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1486,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "See the previous response.",
      "parentUuid": "bf3e4298_5ce49d9f",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4053f846_5b8eabce",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "why wrap with a new LinkedList\u003c\u003e() ?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "616e0d71_f50961cd",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "The \u0027bucket.setOwner(ts)\u0027 operation (below) removes the bucket from it\u0027s current \"Server\" (which is nullServer), and adds it to the newly-assigned server \u0027ts\u0027. This means that \u0027nullServer.buckets\u0027 is being changed as we iterate through the loop, which would result in a \u0027ConcurrentModificationException\u0027, unless we iterate over a copy.",
      "parentUuid": "4053f846_5b8eabce",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee79b2be_47bddd89",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "got it - didn\u0027t realize the setOwner() might change it.  Perhaps add a comment to that effect so folks in the future don\u0027t wonder the same thing",
      "parentUuid": "616e0d71_f50961cd",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "313596fb_52aa07fe",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1553,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "will this actually remove the bucket from last.buckets?  and add it to first.buckets?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d435efe6_e61f2ff7",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1553,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "Yes - \u0027setOwner\u0027 updates the old and new owner\u0027s bucket set (\u0027setPrimaryBackup\u0027 and \u0027setSecondaryBackup\u0027 behave in a similar manner). At this point in the code, \u0027last\u0027 has at least two more buckets than \u0027first\u0027, so one bucket is moved from \u0027last\u0027 to \u0027first\u0027 to bring them closer in balance.",
      "parentUuid": "313596fb_52aa07fe",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d29ca72_3d3d77a8",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1578,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: nesting too deep",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3784b2eb_7dd96017",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1787,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: use lambda",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a453b21_e2df6610",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "does make me wonder if the output should just be HTML",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4954c88_385a0ffc",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "\u0027/cmd/dumpBuckets\u0027 is a test/debugging command. It is most often invoked by a human running \u0027curl\u0027, but should still display correctly if you use a browser. I find it more readable than HTML or JSON (with or without pretty-printing).",
      "parentUuid": "0a453b21_e2df6610",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c8a2de3_96f96161",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1975,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "may just use a LinkedHashMap, which would be more efficient than doing contains/add pair",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d318f878_6fc9342d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1975,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "\u0027register\u0027 is only called at initialization time -- \u0027backupList\u0027 doesn\u0027t change after that point.\n\nIf a bucket migrates from one server to another, \u0027Backup.generate(int bucketNumber)\u0027 is called on every entry on the list, the resulting objects are serialized, sent to the new host, deserialized, and \u0027Restore.restore(int bucketNumber)\u0027 is called for each entry on the destination host.",
      "parentUuid": "6c8a2de3_96f96161",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e336b17f_211d8c90",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 1975,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "I assume there won\u0027t be many backup items?  Otherwise, could use a Set, which is still more efficient than a List.",
      "parentUuid": "d318f878_6fc9342d",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58af0505_d4031aa0",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2058,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "declare as Queue",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daf45582_ce87a187",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2114,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "so we don\u0027t wait for more than one second for network data?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f899d3fc_0d218294",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2114,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "This is not the overall wait time -- there is a polling loop (lines 2193-2198) that checks the state at 1 second intervals. An actual error time-out occurs when \u0027endTime\u0027 is reached, which is typically something like 30 seconds after start.",
      "parentUuid": "daf45582_ce87a187",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "975720d6_37cecdb3",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2114,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "Got it.",
      "parentUuid": "f899d3fc_0d218294",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09f8e027_739d525f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2173,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "should this be \"!\u003d\" ?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a07b2d8_d8fc2380",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2173,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "No, this is correct -- if \u0027this.data !\u003d null\u0027, we have previously received backup data, and are presumably acting on it. I suppose we could consider logging an error message if we get redundant backup data, although it may be that retransmissions are not unusual -- I wrote this stuff back in 2017, and I don\u0027t remember all of the details.",
      "parentUuid": "09f8e027_739d525f",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ff3d481_5e3f24c9",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2173,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "Oh, duh, I was reading it as \"data \u003d\u003d null\"",
      "parentUuid": "2a07b2d8_d8fc2380",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea74184f_cd556ab5",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2226,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "sonar: nesting too deep",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84a63cc7_dcf0bd7d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2274,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "have an approach in mind?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff5adc70_348a6bea",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2274,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "OK - this is one of those fuzzy 2017 memories I alluded to earlier :-)\n\nWhen bucket migration is occurring, we want to queue incoming messages until all of the associated data has been restored, and then process messages in order, continuing to queue them until we catch up.\n\nI believe there was a situation where the \u0027process()\u0027 method associated with incoming UEB/DMAAP messages acted just like a new incoming message, and it wound up back in the queue. I will need to do some more digging to see what this was about, and verify that it was fixed.",
      "parentUuid": "84a63cc7_dcf0bd7d",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16df8ae9_737caea7",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2357,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "should it be forwarded to the new owner?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f45974ea_8cd0be38",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2357,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-13T18:05:47Z",
      "side": 1,
      "message": "At this point, I don\u0027t know what would happen if a bucket is moved from server 1 to server 2 and then to server 3 in quick succession. It seems safer to just discard the data, and log an error.",
      "parentUuid": "16df8ae9_737caea7",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be65839_c4484960",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2357,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-13T18:51:41Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "f45974ea_8cd0be38",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6acf444d_6ebeaae4",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Bucket.java",
        "patchSetId": 2
      },
      "lineNbr": 2372,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:09:51Z",
      "side": 1,
      "message": "declare as List",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5657667f_1bba0e88",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "I would prefer to see this class re-written to use TopicEndpoint",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f7ebce5_c3a4771a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "FYI: should not assume that StandardCoder is thread-safe",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e32accb_66d41378",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "same comments as with Bucket: put statics into some kind of context object that this can use",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cc9fd18_1c767712",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "This does not apply - remove.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7125da8b_f8e3baaf",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Seems dup code, and only supports ueb, why not reuse policy policy-endpoints?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a53a044_2a41ae39",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "not applicable - general",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8baa4d5_6c8f4704",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "need separate catch for InterruptedException",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e30f54a_9f2994be",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "sleep give sonars.   policy-endpoints would handle this and allow configuration of values.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5e27526_8a64ef48",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "log e2, and either throw or re-interrupt (sonars).",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5161916c_da086c1a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "should also drop out of the \"run\" loop",
      "parentUuid": "b5e27526_8a64ef48",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "784314ee_2fede263",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "policy-endpoints.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7fc16fb_f656e9e3",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 338,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "handle InterruptedException differently",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13650806_93762c0f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Discovery.java",
        "patchSetId": 2
      },
      "lineNbr": 345,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "drop out of run()",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41194143_7625d468",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Events.java",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-07T22:27:25Z",
      "side": 1,
      "message": "declare as Queue\n\n\"final\"\n\nif expecting lots of Events being added and removed over time, then maybe use a Map instead",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2855af4c_5c3afad1",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "looks like most of these classes can be moved to their own file\n\nsame comment for several files",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8416fbd2_948461a0",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "use standardcoder ?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d2bbbcb_7f39e89a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-14T09:59:51Z",
      "side": 1,
      "message": "StandardCoder (line 59) is being used to convert a JSON message to a JsonObject, which is then used to locate the keyword that ultimately determines where the message is routed. See the \u0027beforeOffer\u0027 method on line 275.",
      "parentUuid": "8416fbd2_948461a0",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1f921d9_22b6ceb1",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "might want to use html mark-up (i.e., \"dl\") to preserve the appearance of this comment, in case someone ever does source-\u003eformat on the file",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa8ee63_507b9637",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "maybe add Ms, Millis, or Sec to make it clear which it is",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8876e675_a9400bc2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "definitely seems odd to directly access a method within a nested class",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1787bea1_6c4753ba",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "utf-8",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adbe99bc_57fe32fd",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "use StandardCoderObject instead.  Then lines 296-332 can be replaced with:\n\n  object.getString(path-without-conversion-function)\n\nThat would be the strong preference; we can add support for conversion functions, if need be.  At the least, just use a HashMap\u003cString,Object\u003e instead of JsonObject.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bbc7daa_87951f56",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-16T04:48:12Z",
      "side": 1,
      "message": "Let\u0027s just stick with StandardCoderObject; it does the path loop already, just need to deal with the conversion function.  You might have a better idea, but here are the three that I see:\n1) server pool:\n     copies path, stripping the \":xxx\" suffix from the last component\n     invokes object.getString(copied path)\n     invokes the conversion function with the result\n2) StandardCoderObject:\n     add a new method getConvertedString(converter, path)\n         converter takes the value and the function name (i.e., the suffix of the last\n         path component) and returns the converted value\n   server pool:\n     invokes object.getConvertedString(converter, path)\n3) StandardCoderObject:\n     modify getString(path) to strip any \":xxx\" suffix from the last component\n   server pool:\n     invokes object.getString(path)\n     invokes the conversion function on the result\n\nI like #1, because it seems like this conversion stuff is ancillary to StandardCoderObject.  On the other hand, I could see that the conversion stuff might be useful, so #2 may actually be the better answer.  I can also do #3, though that seems the least favorable of these options.",
      "parentUuid": "adbe99bc_57fe32fd",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6df096c_7bd6b98e",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "add @formatter:off to preserve formatting of these lines\n\nsame comment elsewhere",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4581560f_4ac896c2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 428,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "sonar: this method probably exceeds the cyclomatic complexity, though I\u0027m unsure",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fc3d319_61299c7d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 446,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "sonar: nesting is too deep",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b9b5b58_89d1ece0",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 484,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "utf-8",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55122f90_8be35621",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 505,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "replace lines 505-511 with:\n\n  for(String name: prop.stringPropertyNames()) {",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "668911dd_c3f6feac",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 607,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "add \"private final\" as an indicator that the methods won\u0027t be changing these values\n\nsame comment below",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "282701b8_2db81871",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 630,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "use @AllArgsConstructor",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb4e7a7_b15a1f37",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 698,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "maybe change \"TBD\" to \"TODO\" so it\u0027s flagged by sonar and not forgotten - Pam may have a different opinion.\n\nsame comment elsewhere",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3acfa31_c7cd14b9",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 731,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "\"private final List\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca4f1ab_f380b51a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 736,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "method seems a bit long; maybe break into two methods",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "515042fa_1b8cd401",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 757,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "too bad we can\u0027t build this list for all the buckets at once and avoid looping through all objects for every bucket",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e194d72_c0b7a035",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 764,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "probably more efficient to loop over the fact handles and avoid the extra look-up.  Could also avoid the test on line 765.\n\nwonder if the handles should be accumulated and then deleted after the loop? i.e., does delete() interfere with getObjects()?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3ce684b_7f2dda74",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 767,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "do we re-insert these later? Or are we moving them to another server?  Perhaps add a comment to explain",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d24a8a3_efa80f52",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/FeatureServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 902,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "need to check session\u003d\u003dnull?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e936a5f8_263f96e6",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "we prefer the following, as it requires less indentation and makes it more apparent what\u0027s happening:\n\n  if(lu !\u003d null) {\n    return lu.getKeyword(obj);\n  }",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af222acf_f43234d8",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "I like this approach to finding the \"best\" match - nice!",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04280486_4a1bc6f2",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "sonar: iterate over the entrySet to avoid the look-up on line 80",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d2eef57_cd1fad6f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "\"is\" \u003d\u003e \"are\"\n\"object\u0027s\" \u003d\u003e \"objects\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebd3889e_405409de",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "sonar: cyclomatic complexity; break this into separate methods",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82170123_2dcb1ba6",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "looks like this could be done via a on demand holder idiom: https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ded658c_7a1ec10e",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "replace lines 160-166 with:\n\n  for(String name: prop.stringPropertyNames()) {",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbee1c56_6464e493",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "any way to make use of the \"best match\" approach from before?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bc97da8_2bdf015f",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "technically, interfaces can have superinterfaces",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99a0599_0e4556ed",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "leave off \",error\u003d{}\" so that the stacktrace will be logged",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74b8fb59_c6ea817a",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "don\u0027t we need to change access permissions on the field? Or do we depend on it being public?\n\nof course, java 11 won\u0027t be happy if we change access permissions",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7db5bb6_6e1d9eb3",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "leave off \", error\u003d{}\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "458150cd_031c0a1c",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 410,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "remove \", error\u003d{}\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3379b612_bd540a78",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 427,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "this stuff below could be reused in other places (e.g., StandardCoderObject) if it were a full-fledged object, without the static data/methods",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "034db355_0c78203d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "\"private final\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f52ff0c_beeb9de7",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Keyword.java",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-15T17:59:46Z",
      "side": 1,
      "message": "use @AllArgsConstructor",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee9eb94d_49888f08",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "\"private\" or \"private final\" as appropriate",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79c38b3_718911d7",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "maybe name \"count\" something more meaningful",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "241a18cd_b8986935",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "sonar: use compute() instead of get()/put()",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "824e5743_dee67a77",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 394,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "sonar: use compute() or putIfAbsent() instead of get()/put()",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d92c9bd5_83fd5d3d",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 468,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "utf-8",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "910fd4f9_a40ce31e",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Leader.java",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-02-18T02:06:24Z",
      "side": 1,
      "message": "\"private\"\n\nsame comment elsewhere",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc7478ed_62968ded",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/RestServerPool.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Use swagger api to annotate it and placing this class under  package org.onap.policy.drools.server.restful (still under this project) would make telemetry expose it externally to users.",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb437a82_632f06ae",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/ServerPoolProperties.java",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "Can the generic methods be added to PropertyUtil in policy-utils ?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "355ddd1e_f134b088",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/ServerPoolProperties.java",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 743
      },
      "writtenOn": "2020-02-14T09:59:51Z",
      "side": 1,
      "message": "Not in this form -- they all operate on the static \u0027properties\u0027 variable containing the server pool properties. You could define a new class, perhaps a subclass of \u0027Properties\u0027, and add these methods as instance methods.",
      "parentUuid": "bb437a82_632f06ae",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b2be42_db3f9043",
        "filename": "feature-server-pool/src/main/java/org/onap/policy/drools/serverpool/Util.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "can it use timer facility in PolicyEngine ?",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac8dd709_7cb77c2f",
        "filename": "feature-server-pool/src/test/resources/drools-artifact-1.1/pom.xml",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-04T22:17:16Z",
      "side": 1,
      "message": "\"policy-core\"",
      "revId": "4bb878bb751e6fd913286d76d67f16aa50fa998a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}