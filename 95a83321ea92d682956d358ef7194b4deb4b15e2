{
  "comments": [
    {
      "key": {
        "uuid": "49b22ab2_a246d6e1",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T19:39:03Z",
      "side": 1,
      "message": "if no schema is provided, then isConformant will always return false. Maybe we need to log a message or throw an exception to indicate \"schema file is missing for xxx policy type\"?",
      "range": {
        "startLine": 70,
        "startChar": 8,
        "endLine": 72,
        "endChar": 9
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5829f61b_df38f7da",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "What this \"T\" could be other than ToscaPolicy or String? Seems I don\u0027t get it.",
      "range": {
        "startLine": 92,
        "startChar": 98,
        "endLine": 92,
        "endChar": 99
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e758bbe_428f0639",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "Why do we need both this method and \"isConformant\"? They look doing the same thing? Maybe we just want one to return true/false while the other to throw Exception in addition?",
      "range": {
        "startLine": 109,
        "startChar": 19,
        "endLine": 109,
        "endChar": 30
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f2838c7_58681566",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "in this case, it has been logged and re-thrown. Does sonar complain about it?",
      "range": {
        "startLine": 125,
        "startChar": 16,
        "endLine": 125,
        "endChar": 23
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50825382_9bf86f54",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T19:39:03Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 162,
        "startChar": 29,
        "endLine": 162,
        "endChar": 31
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfeecd9d_cccd7a75",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/DomainMaker.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T19:39:03Z",
      "side": 1,
      "message": ".json?",
      "range": {
        "startLine": 162,
        "startChar": 53,
        "endLine": 162,
        "endChar": 57
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b6bb503_68b3644d",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/Controller.java",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "typo, \"native\", same comment for all others",
      "range": {
        "startLine": 21,
        "startChar": 45,
        "endLine": 21,
        "endChar": 50
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "893b9be1_fc166913",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/Metadata.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2787
      },
      "writtenOn": "2020-02-03T14:54:56Z",
      "side": 1,
      "message": "See comment on the NativeDroolsPolicy class.",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c39945_6c0e93de",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/Metadata.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "Why do we need to re-define Metadata pojo?",
      "range": {
        "startLine": 34,
        "startChar": 13,
        "endLine": 34,
        "endChar": 21
      },
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e03b7fd_da26bb8c",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/NativeDroolsPolicy.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2787
      },
      "writtenOn": "2020-02-03T14:54:56Z",
      "side": 1,
      "message": "This seems to be the same modelling as the org.onap.policy.models.tosca.authorative.concepts.ToscaPolicy class. Is there any way to reuse the same type rather than modelling it again?",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d05d850_912e2c83",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/NativeDroolsPolicy.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-02-03T17:46:52Z",
      "side": 1,
      "message": "Not sure Liam, I don\u0027t think I can reuse much from the tosca policy.  ToscaPolicy handles generic structures such as maps of string to objects, strings to strings, and list of these maps.   For example ToscaPolicy contains:\n\nprivate Map\u003cString, Object\u003e properties;  \nprivate Map\u003cString, String\u003e metadata;\n\nand \"Map\u003cString, Object\u003e properties\" at the same time contains nested lists of List\u003cMap\u003cString, Object\u003e\u003e for example, besides inconvenience on dealing with these objects, and lack of validation, easy to make programmatic mistakes as it bypasses much of the compile time type validation that will be more strict with these domain objects.",
      "parentUuid": "3e03b7fd_da26bb8c",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f218b16_4941ebe5",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/NativeDroolsPolicy.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T18:59:51Z",
      "side": 1,
      "message": "have the same comment as Liam. Perhaps ToscaPolicy can be reused in theory but parsing the native drools specific property fields would need additional steps, like calling StandardCoder\u0027s toStandard() method to convert the nested Object to JsonElement then call get(\"rulesArtifact\") to extract its value. Getting every nested field could be easily kept at the JsonElement level. Nonetheless, I am fine with this re-definition too.",
      "parentUuid": "2d05d850_912e2c83",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa3efb02_724fc667",
        "filename": "feature-lifecycle/src/main/java/org/onap/policy/drools/domain/models/nativ/rules/Properties.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2787
      },
      "writtenOn": "2020-02-03T14:54:56Z",
      "side": 1,
      "message": "See comment on the NativeDroolsPolicy class.",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e818d13_7b592061",
        "filename": "feature-lifecycle/src/main/resources/schemas/onap.policies.native.Drools-1.0.0.schema.json",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1441
      },
      "writtenOn": "2020-02-03T19:39:03Z",
      "side": 1,
      "message": "for each different policy type which we want to validate on a field basis, we always need a separate such schema file? If no schema file is provided, can we fall back to use general tosca policy vs. policy type validation that Liam is considering to build? This sort of overlaps with that general validation",
      "revId": "95a83321ea92d682956d358ef7194b4deb4b15e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}