{
  "comments": [
    {
      "key": {
        "uuid": "02484160_ee6fa07e",
        "filename": "policy-utils/src/main/java/org/onap/policy/drools/utils/logging/LoggerUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-06-15T23:49:05Z",
      "side": 1,
      "message": "what does this actually accomplish?  Looks like it\u0027s doing setLevel(getLevel()), which is typically a NO-OP",
      "revId": "af4398c19298f049079a178fe7f7db96da8cda8b",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc86114_638732fc",
        "filename": "policy-utils/src/main/java/org/onap/policy/drools/utils/logging/LoggerUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-06-16T00:40:57Z",
      "side": 1,
      "message": "Wrt the previous version of the code that used toLevel(x), the way that worked is that when it couldn\u0027t convert it to an actual level, it will set the level to debug (this is the actual logback library implementation).  \nThere is this other method available in the same class:\npublic static Level toLevel(String x, Level defaultLevel)\nwhere if it cannot convert the xto an actual Level, it will take a \"defaultLevel\", so effectively, this would try to set it to the \"loggerLevel\" parameter and if it can\u0027t, it will set it to the existing one (rather than defaulting to debug as before), so it is no-op as you say but just for the case where the \"loggerLevel\" does not correspond to a logback level.",
      "parentUuid": "02484160_ee6fa07e",
      "revId": "af4398c19298f049079a178fe7f7db96da8cda8b",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10c5c442_7a6de33e",
        "filename": "policy-utils/src/main/java/org/onap/policy/drools/utils/logging/LoggerUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-06-16T12:46:36Z",
      "side": 1,
      "message": "thx for the explanation. No way to do this using only slf4j (instead of logback)?",
      "parentUuid": "dcc86114_638732fc",
      "revId": "af4398c19298f049079a178fe7f7db96da8cda8b",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "377bed45_ee4b9ddb",
        "filename": "policy-utils/src/main/java/org/onap/policy/drools/utils/logging/LoggerUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-06-16T13:28:22Z",
      "side": 1,
      "message": "as far as I know it is not possible to do it programmatically with slf4j (it is just a facade to several logging frameworks) but was possible to do it to logback, the underlying logback framework all of our components use.  I think that was also working for eelf as it was also using logback under the hood.",
      "parentUuid": "10c5c442_7a6de33e",
      "revId": "af4398c19298f049079a178fe7f7db96da8cda8b",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d19a51_9db8aeee",
        "filename": "policy-utils/src/main/java/org/onap/policy/drools/utils/logging/LoggerUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-06-16T14:21:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "377bed45_ee4b9ddb",
      "revId": "af4398c19298f049079a178fe7f7db96da8cda8b",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}