###
# ============LICENSE_START=======================================================
# feature-pooling-messages
# ================================================================================
# Copyright (C) 2018-2020 AT&T Intellectual Property. All rights reserved.
# Modifications Copyright (C) 2024 Nordix Foundation.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
###

# In general, the feature-specific properties begin with "pooling",
# and they may be made specific to a controller by prepending with
# "pooling.<controller-name>", instead.
#
# The available properties and their default values are shown below.

# Whether the feature is enabled.
#pooling.enabled=false

# The internal kafka topic used by a controller.  Note: the controller
# name is required for this property.
#pooling.<controller-name>.topic =

# Maximum number of events to retain in the queue while a new host waits
# to be assigned work.
#pooling.offline.queue.limit=1000

# Maximum age, in milliseconds, of events to be retained in the queue.
# Events older than this are discarded.
#pooling.offline.queue.age.milliseconds=60000

# Time, in milliseconds, to wait for an "Offline" message to be published
# to topic manager before the connection may be closed.
#pooling.offline.publish.wait.milliseconds=3000

# Time, in milliseconds, to wait for this host's initial heart beat.  This
# is used to verify connectivity to the internal topic.
#pooling.start.heartbeat.milliseconds=100000

# Time, in milliseconds, to wait before attempting to reactivate this
# host when it was not assigned any work.
#pooling.reactivate.milliseconds=50000

# Time, in milliseconds, to wait for other hosts to identify themselves
# when this host is started.
#pooling.identification.milliseconds=50000

# Time, in milliseconds, to wait for heart beats from this host, or its
# predecessor, during the active state.
#pooling.active.heartbeat.milliseconds=50000

# Time, in milliseconds, to wait between heart beat generations.
#pooling.inter.heartbeat.milliseconds=15000

# Topic used for inter-host communication for a particular controller
# pooling.<controller-name>.topic=XXX

# Each controller that is enabled should have its own topic and the
# corresponding ${topicManager}.xxx properties (using kafka as default).
# However, for now, just assume that the usecases features will not both
# be enabled at the same time.

pooling.usecases.enabled=true
pooling.usecases.topic=${env:POOLING_TOPIC}

# the list of sources and sinks should be identical
kafka.source.topics=POOLING_TOPIC
kafka.sink.topics=POOLING_TOPIC

kafka.source.topics.POOLING_TOPIC.servers=${env:KAFKA_SERVERS}
kafka.source.topics.POOLING_TOPIC.effectiveTopic=${env:POOLING_TOPIC}
kafka.source.topics.POOLING_TOPIC.apiKey=
kafka.source.topics.POOLING_TOPIC.apiSecret=

kafka.sink.topics.POOLING_TOPIC.servers=${env:kafka_SERVERS}
kafka.sink.topics.POOLING_TOPIC.effectiveTopic=${env:POOLING_TOPIC}
kafka.sink.topics.POOLING_TOPIC.apiKey=
kafka.sink.topics.POOLING_TOPIC.apiSecret=
